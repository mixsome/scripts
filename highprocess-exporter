#!/usr/bin/env python3
# coding:utf-8

import os
import logging
import subprocess
from flask import Flask, request, Response
from flask_apscheduler import APScheduler
from prometheus_client.core import CollectorRegistry
from prometheus_client import Gauge, generate_latest

app = Flask(__name__)
pwd = os.path.split(os.path.realpath(__file__))[0]
logger = logging.getLogger(__name__)
logger.setLevel(level=logging.INFO)

registry = CollectorRegistry(auto_describe=False)
process_cpu_percent = Gauge('process_cpu_percent','进程cpu占比',['command','ip'], registry=registry)
process_memory_percent = Gauge('process_memory_percent','进程内存占比',['command','ip'], registry=registry)
process_vsz = Gauge('process_vsz','进程虚拟内存',['command','ip'], registry=registry)
process_rss = Gauge('process_rss','进程物理内存',['command','ip'], registry=registry)

@app.route("/metrics", methods=['GET'])
def metrics():
    command = 'ps auxw|head -1;ps auxw|sort -rn -k4|head -50'
    status,output = subprocess.getstatusoutput(command)
    if status == 0:
        output=output.split('\n')
        for line in output:
            if line.startswith('USER'):
                pass
            else:
                line = line.split()
                # USER    PID %CPU %MEM   VSZ   RSS TTY   STAT START TIME COMMAND
                cmdline = os.popen(f'cat /proc/{line[1]}/cmdline').read().strip()
                process_cpu_percent.labels(command=cmdline,ip=hostip).set(line[2])
                process_memory_percent.labels(command=cmdline,ip=hostip).set(line[3])
                process_vsz.labels(command=cmdline,ip=hostip).set(line[4])
                process_rss.labels(command=cmdline,ip=hostip).set(line[5])
    return Response(generate_latest(registry), mimetype="text/plain")

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port='5601', use_reloader=False)
